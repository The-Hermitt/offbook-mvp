name: OffBook Smoke (Render)

on:
  workflow_dispatch:
  pull_request:
    types: [opened, synchronize, reopened]
    branches: [ main ]

jobs:
  smoke:
    runs-on: ubuntu-latest
    env:
      BASE: ${{ secrets.OFFBOOK_BASE_URL }}   # e.g. https://offbook-mvp.onrender.com
      SECRET: ${{ secrets.SHARED_SECRET }}    # e.g. super-dev-secret (or empty)
    steps:
      - name: Validate config
        run: |
          test -n "$BASE" || (echo "❌ Missing OFFBOOK_BASE_URL secret" && exit 1)
          echo "BASE=$BASE"
          if [ -n "$SECRET" ]; then echo "Secret present"; else echo "No secret set"; fi

      - name: Health checks
        run: |
          curl -s -i "$BASE/health" | sed -n '1,10p'
          curl -s -i "$BASE/health/tts" | sed -n '1,10p'

      - name: Upload script text
        id: upload
        run: |
          HDRS=(-H "Content-Type: application/json"); [ -n "$SECRET" ] && HDRS+=(-H "X-Shared-Secret: $SECRET")
          UP=$(curl -s -i -X POST "$BASE/debug/upload_script_text" "${HDRS[@]}" \
            -d '{"title":"Sides","text":"JANE: Hi.\nGABE: Hey.\nJANE: Ready?"}')
          echo "$UP" | sed -n '1,25p'
          SID=$(echo "$UP" | sed -n 's/.*"script_id":"\([^"]*\)".*/\1/p')
          echo "SID=$SID" >> "$GITHUB_OUTPUT"
          test -n "$SID"

      - name: Scenes
        id: scenes
        run: |
          HDRS=(-H "Content-Type: application/json"); [ -n "$SECRET" ] && HDRS+=(-H "X-Shared-Secret: $SECRET")
          SC=$(curl -s -i "$BASE/debug/scenes?script_id=${{ steps.upload.outputs.SID }}" "${HDRS[@]}")
          echo "$SC" | sed -n '1,25p'
          SCID=$(echo "$SC" | sed -n 's/.*"id":"\([^"]*\)".*/\1/p')
          echo "SCID=$SCID" >> "$GITHUB_OUTPUT"
          test -n "$SCID"

      - name: Set voice
        run: |
          HDRS=(-H "Content-Type: application/json"); [ -n "$SECRET" ] && HDRS+=(-H "X-Shared-Secret: $SECRET")
          curl -s -i -X POST "$BASE/debug/set_voice" "${HDRS[@]}" \
            -d "{\"script_id\":\"${{ steps.upload.outputs.SID }}\",\"voice_map\":{\"GABE\":\"alloy\"}}" | sed -n '1,20p'

      - name: Render
        id: render
        run: |
          HDRS=(-H "Content-Type: application/json"); [ -n "$SECRET" ] && HDRS+=(-H "X-Shared-Secret: $SECRET")
          R=$(curl -s -i -X POST "$BASE/debug/render" "${HDRS[@]}" \
            -d "{\"script_id\":\"${{ steps.upload.outputs.SID }}\",\"scene_id\":\"${{ steps.scenes.outputs.SCID }}\",\"role\":\"JANE\",\"pace\":\"normal\"}")
          echo "$R" | sed -n '1,25p'
          RID=$(echo "$R" | sed -n 's/.*"render_id":"\([^"]*\)".*/\1/p')
          echo "RID=$RID" >> "$GITHUB_OUTPUT"
          test -n "$RID"

      - name: Render status
        run: |
          HDRS=(-H "Content-Type: application/json"); [ -n "$SECRET" ] && HDRS+=(-H "X-Shared-Secret: $SECRET")
          curl -s -i "$BASE/debug/render_status?render_id=${{ steps.render.outputs.RID }}" "${HDRS[@]}" | sed -n '1,40p'
          echo "Asset URL: $BASE/api/assets/${{ steps.render.outputs.RID }}"

      - name: UI tabs load (basic HTML presence check)
        run: |
          URL="$BASE/app-tabs.html"
          [ -n "$SECRET" ] && URL="$URL?secret=$SECRET"
          H=$(curl -s -i "$URL")
          echo "$H" | sed -n '1,15p'
          for T in Import Assign Rehearse Record Gallery Settings; do
            echo "$H" | grep -qi "$T" || (echo "❌ Missing tab: $T" && exit 1)
          done
          echo "✅ Tabs rendered."
